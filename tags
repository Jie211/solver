!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLAS_H_INCLUDED__	blas.h	/^#define BLAS_H_INCLUDED__$/;"	d
CG_CRS	cg.c	/^int CG_CRS(double *val, int *col, int *ptr, double *bvec, double *xvec, int ndata, double eps, int i_max){$/;"	f
CG_H_INCLUDED__	cg.h	/^#define CG_H_INCLUDED__$/;"	d
CG_Init	cg.c	/^void CG_Init(double *v1, double *v2, double *v3, double *x, double ndata){$/;"	f
CR_CRS	cr.c	/^int CR_CRS(double *val, int *col, int *ptr, double *bvec, double *xvec, int ndata, double eps, int i_max){$/;"	f
CR_H_INCLUDED__	cr.h	/^#define CR_H_INCLUDED__$/;"	d
CR_Init	cr.c	/^void CR_Init(double *v1, double *v2, double *v3, double *v4, double *x, double ndata){$/;"	f
CSR_start	start.c	/^int CSR_start(int argc, char const* argv[]){$/;"	f
Double1Free	blas.c	/^void Double1Free(double *ptr)$/;"	f
Double1Malloc	blas.c	/^double *Double1Malloc(int ndata)$/;"	f
Double1Norm	blas.c	/^double Double1Norm(double *x, int ndata)$/;"	f
Double2Free	blas.c	/^void Double2Free(double **ptr, int ndata)$/;"	f
Double2Malloc	blas.c	/^double **Double2Malloc(int ndatax, int ndatay)$/;"	f
Double2Norm	blas.c	/^double Double2Norm(double *x, int ndata)$/;"	f
DoubleCalArApKCG	blas.c	/^void DoubleCalArApKCG(double *Ar, double *Ap, double *val, int *col, int *ptr, double *rvec, double *pvec, int ndata, int kskip)$/;"	f
DoubleCalArApKCR	blas.c	/^void DoubleCalArApKCR(double *Ar, double *Ap, double *val, int *col, int *ptr, double *rvec, double *pvec, int ndata, int kskip)$/;"	f
DoubleCalDeltaEtaZetaKCG	blas.c	/^void DoubleCalDeltaEtaZetaKCG(double *delta, double *eta, double *zeta, double *Ar, double *Ap, double *rvec, double *pvec, int ndata, int kskip)$/;"	f
DoubleCalDeltaEtaZetaKCR	blas.c	/^void DoubleCalDeltaEtaZetaKCR(double *delta, double *eta, double *zeta, double *Ar, double *Ap, double *rvec, int ndata, int kskip)$/;"	f
DoubleDot	blas.c	/^double DoubleDot(double *x, double *y, int ndata)$/;"	f
DoubleMVMCSR	blas.c	/^void DoubleMVMCSR(double *out, double *val, int *col, int *ptr, double *vec, int ndata)$/;"	f
DoubleMaxNorm	blas.c	/^double DoubleMaxNorm(double *x, int ndata)$/;"	f
DoubleScalar	blas.c	/^void DoubleScalar(double *out, double a, double *x, int ndata)$/;"	f
DoubleScalarxpy	blas.c	/^void DoubleScalarxpy(double *out, double a, double *x, double *y, int ndata)$/;"	f
DoubleVecAdd	blas.c	/^void DoubleVecAdd(double *out, double *x, double *y, int ndata)$/;"	f
DoubleVecCopy	blas.c	/^void DoubleVecCopy(double *a, double *b, int ndata)$/;"	f
DoubleVecInit	blas.c	/^void DoubleVecInit(double *vec, double val, int ndata)$/;"	f
DoubleVecMul	blas.c	/^void DoubleVecMul(double *out, double *x, double *y, int ndata)$/;"	f
DoubleVecSub	blas.c	/^void DoubleVecSub(double *out, double *x, double *y, int ndata)$/;"	f
EPS	start.h	/^#define EPS /;"	d
FIX	start.h	/^#define FIX /;"	d
FileClose	io.c	/^void FileClose(FILE *fp){$/;"	f
FileFound	io.c	/^int FileFound(int argc, char const* argv[]){$/;"	f
FileInit	io.c	/^FILE* FileInit(char *name, char *mode){$/;"	f
FileOutPutVec	io.c	/^void FileOutPutVec(FILE *fp, double *vec, int ndata){$/;"	f
GetData	io.c	/^void GetData(const char *file1, const char *file2, const char *file3, int *col, int *ptr, double *val, double *b, double *x, int N, int NZ)$/;"	f
GetHead	io.c	/^void GetHead(const char *bx, const char *col, const char *ptr, int *n, int *nnz)$/;"	f
INNER	start.h	/^#define INNER$/;"	d
INNERSOLVERS_H_INCLUDED__	innersolvers.h	/^#define INNERSOLVERS_H_INCLUDED__$/;"	d
IO_H_INCLUDED__	io.h	/^#define IO_H_INCLUDED__$/;"	d
I_EPS	start.h	/^#define I_EPS /;"	d
I_FIX	start.h	/^#define I_FIX /;"	d
I_I_MAX	start.h	/^#define I_I_MAX /;"	d
I_KSKIP	start.h	/^#define I_KSKIP /;"	d
I_MAX	start.h	/^#define I_MAX /;"	d
InnerSolverSelecter	innersolvers.c	/^int InnerSolverSelecter(double *val, int *col, int *ptr, double *bvec, double *xvec, int ndata, double eps, int i_max, int kskip, int fix){$/;"	f
Intger1Free	blas.c	/^void Intger1Free(int *ptr)$/;"	f
Intger1Malloc	blas.c	/^int *Intger1Malloc(int ndata)$/;"	f
Intger2Free	blas.c	/^void Intger2Free(int **ptr, int ndata)$/;"	f
Intger2Malloc	blas.c	/^int **Intger2Malloc(int ndatax, int ndatay)$/;"	f
KSKIP	start.h	/^#define KSKIP /;"	d
KSKIPCG_CRS	kskipcg.c	/^int KSKIPCG_CRS(double *val, int *col, int *ptr, double *bvec, double *xvec, int ndata, double eps, int i_max, int kskip, int fix)$/;"	f
KSKIPCG_H_INCLUDED__	kskipcg.h	/^#define KSKIPCG_H_INCLUDED__$/;"	d
KSKIPCG_Init	kskipcg.c	/^void KSKIPCG_Init(double *v1, double *v2, double *v3, double *v4, double *v5, double *v6, double *v7, double *v8, double *v9, int ndata, int kskip)$/;"	f
KSKIPCR_CRS	kskipcr.c	/^int KSKIPCR_CRS(double *val, int *col, int *ptr, double *bvec, double *xvec, int ndata, double eps, int i_max, int kskip, int fix)$/;"	f
KSKIPCR_H_INCLUDED__	kskipcr.h	/^#define KSKIPCR_H_INCLUDED__$/;"	d
KSKIPCR_Init	kskipcr.c	/^void KSKIPCR_Init(double *v1, double *v2, double *v3, double *v4, double *v5, double *v6, double *v7, double *v8, double *v9, int ndata, int kskip)$/;"	f
SOLVERS_H_INCLUDED__	solvers.h	/^#define SOLVERS_H_INCLUDED__$/;"	d
SolverSelecter	solvers.c	/^int SolverSelecter(double *val, int *col, int *ptr, double *bvec, double *xvec, int ndata, double eps, int i_max, int kskip, int fix){$/;"	f
THREADS	start.h	/^#define THREADS /;"	d
UsageCheck	io.c	/^int UsageCheck(int argc, char const* argv[]){$/;"	f
VPCG_CRS	vpcg.c	/^int VPCG_CRS(double *val, int *col, int *ptr, double *bvec, double *xvec, int ndata, double eps, int i_max){$/;"	f
VPCG_H_INCLUDED__	vpcg.h	/^#define VPCG_H_INCLUDED__$/;"	d
VPCG_Init	vpcg.c	/^void VPCG_Init(double *v1, double *v2, double *v3, double *v4, double *x, double ndata){$/;"	f
VPCR_CRS	vpcr.c	/^int VPCR_CRS(double *val, int *col, int *ptr, double *bvec, double *xvec, int ndata, double eps, int i_max){$/;"	f
VPCR_H_INCLUDED__	vpcr.h	/^#define VPCR_H_INCLUDED__$/;"	d
VPCR_Init	vpcr.c	/^void VPCR_Init(double *v1, double *v2, double *v3, double *v4, double *v5, double *v6, double *x, double ndata){$/;"	f
bx_path	start.h	/^char bx_path[512];$/;"	v
col_path	start.h	/^char col_path[512];$/;"	v
error_check_CRS	blas.c	/^double error_check_CRS(double *val, const int *col, const int *ptr, double *b, double *x_new ,double *x_0, int N)$/;"	f
main	main.c	/^int main(int argc, char const* argv[])$/;"	f
ptr_path	start.h	/^char ptr_path[512];$/;"	v
